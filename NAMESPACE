useDynLib(bLSmodelR)
export(addScaleBar)
export(addWindrose)
export(assignCat)
export(calcbw)
export(calcC0)
export(calcepsilon)
export(calcsigmaW)
export(calcTL)
export(calcU)
export(check.compact)
export(cleanTemporary)
export(compactCatalog)
export(deposition)
export(extractResult)
export(join)
export(genInputList)
export(genModel)
export(genSensors)
export(genInterval)
export(genSources)
export(genTolerances)
export(getArea)
export(getCatalogs)
export(rebuildCatListFile)
export(initializeCatalog)
export(plotFootprint)
export(prepareIntervals)
export(coreModel)
export(readCatalog)
export(rotateCatalog)
export(rotate)
export(round125)
export(runbLS)
export(siteMap)
export(setDF)
export(setDT)
export(sortData)
export(switchNames)
export(tagInside)
export(updatePath)
export(uvw0)
export(writeCatalog)
export("%w/o%")
export(FluxPalette)
export(ConcPalette)
export(CalcSteps)
export(CatPath)
export(Catalogs)
export(ModelInput)
export(inters)
export(plotPolys)
export(splitSource)
export(calc_fct)
export(combineSensors)
export(avgCE_sensors)
export(avgCE_sensors_se)
export(getPathLengths)
export(combineSources)
export(avgCE_sources)
export(avgCE_sources_se)
export(avgSourcesWeights)
export(convert)
export(pnt.in.poly)
export(add_data)
export(runbLSlurm)
export(find_partition)
export(collect_results)

importFrom(Rcpp, evalCpp)
importFrom(tcltk,tclvalue,tkgetSaveFile,tk_choose.files,tk_choose.dir)
importFrom(parallel,detectCores)

importFrom(sp,Polygon,Polygons,SpatialPolygons)
importFrom(rgeos,gIntersection)
importFrom(utils,head,tail)
importFrom(RgoogleMaps,XY2LatLon,LatLon2XY.centered)
importFrom(geosphere,distGeo)
import(snow,snowfall,rlecuyer,data.table,maptools)

importFrom("grDevices", "x11")
importFrom("graphics", "plot")                                       
importFrom("stats", "setNames")


S3method(switchNames,data.table)
S3method(switchNames,data.frame)

S3method(setDF,default)
S3method(setDF,bLSresult)

S3method(setDT,default)
S3method(setDT,bLSresult)

S3method(updatePath,data.table)
S3method(updatePath,data.frame)

S3method(head,Sources)
S3method(join,Sources)
S3method(print,Sources)
S3method(tail,Sources)
S3method(plot,Sources)
export(head.Sources)
export(join.Sources)
export(print.Sources)
export(tail.Sources)
export(plot.Sources)

S3method(plot,TDcat)
S3method(points,TDcat)
S3method(print,TDcat)
export(plot.TDcat)
export(points.TDcat)
export(print.TDcat)

S3method(head,Sensors)
S3method(join,Sensors)
S3method(print,Sensors)
S3method(tail,Sensors)
S3method(plot,Sensors)
export(head.Sensors)
export(join.Sensors)
export(print.Sensors)
export(tail.Sensors)
export(plot.Sensors)

S3method(plot,InputList)
export(plot.InputList)
S3method(print,InputList)
export(print.InputList)

S3method(print,TDhead)

S3method(print,Interval)
export(print.Interval)

S3method(dimnames,bLSresult)
S3method(join, bLSresult)
S3method(plot, bLSresult)
export(plot.bLSresult)
export(join.bLSresult)

S3method(join,deposition)
export(join.deposition)

S3method(tagNear,data.table)
S3method(tagNear,list)
S3method(tagNear,matrix)

S3method(rotate,data.table)
S3method(rotate,default)
S3method(rotate,matrix)
S3method(rotate,Sensors)
S3method(rotate,Sources)



importFrom("grDevices", "cm", "colorRampPalette", "contourLines","graphics.off", "grey")
importFrom("graphics", "abline", "axis", "box", "contour", "grid","legend", "lines", "locator", "par", "points", "polygon","rect", "rug", "strheight", "strwidth", "text")
importFrom("stats", "cov", "na.omit", "optimize", "qt", "quantile","rnorm", "sd", "var", "optim")
importFrom("utils", "capture.output", "packageDescription","packageVersion", "read.table", "sessionInfo","write.table")
